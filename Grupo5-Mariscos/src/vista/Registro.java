/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anyel
 */
public class Registro extends javax.swing.JPanel {

    /**
     * Creates new form Page1
     */
    public Registro() {
        initComponents();
        cargarDatosCompletoTabla();
        DefaultComboBoxModel<String> comboBoxModelPuertos = obtenerModeloPuertos();
        ComboBoxPuertos.setModel(comboBoxModelPuertos);
        DefaultComboBoxModel<String> comboBoxModelBarcos = obtenerModeloBarcos();
        ComboBoxBarcos.setModel(comboBoxModelBarcos);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtLugarCaptura = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRegistro = new javax.swing.JTable();
        jdcFechaCaptura = new com.toedter.calendar.JDateChooser();
        bttGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btn = new javax.swing.JButton();
        ComboBoxBarcos = new javax.swing.JComboBox<>();
        ComboBoxPuertos = new javax.swing.JComboBox<>();

        content.setBackground(new java.awt.Color(25, 118, 211));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Registro de Pesca");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID Registro:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Coordenadas:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Barco:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Puerto Base:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Fecha de Pesca:");

        tablaRegistro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID Registro", "Nombre", "Fecha de Pesca", "Coordenadas", "Barco", "Puerto Base"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaRegistro);

        bttGuardar.setForeground(new java.awt.Color(255, 255, 255));
        bttGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/guardar.png"))); // NOI18N
        bttGuardar.setText("Guardar");
        bttGuardar.setBorderPainted(false);
        bttGuardar.setContentAreaFilled(false);
        bttGuardar.setDefaultCapable(false);
        bttGuardar.setFocusPainted(false);
        bttGuardar.setFocusable(false);
        bttGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttGuardarActionPerformed(evt);
            }
        });

        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editar.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setBorderPainted(false);
        btnEditar.setContentAreaFilled(false);
        btnEditar.setDefaultCapable(false);
        btnEditar.setFocusPainted(false);
        btnEditar.setFocusable(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/basura.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorderPainted(false);
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setDefaultCapable(false);
        btnEliminar.setFocusPainted(false);
        btnEliminar.setFocusable(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/buscar-alt.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setDefaultCapable(false);
        btnBuscar.setFocusPainted(false);
        btnBuscar.setFocusable(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(255, 255, 255));
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/actualizar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setBorderPainted(false);
        btnActualizar.setContentAreaFilled(false);
        btnActualizar.setDefaultCapable(false);
        btnActualizar.setFocusPainted(false);
        btnActualizar.setFocusable(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Nombre:");

        btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/seleccion.png"))); // NOI18N
        btn.setBorderPainted(false);
        btn.setContentAreaFilled(false);
        btn.setDefaultCapable(false);
        btn.setFocusPainted(false);
        btn.setFocusable(false);
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        ComboBoxBarcos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ComboBoxPuertos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(bttGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jdcFechaCaptura, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                    .addComponent(txtID)
                                    .addComponent(txtLugarCaptura, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(ComboBoxPuertos, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                            .addGroup(contentLayout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addGap(12, 12, 12)))
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ComboBoxBarcos, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(325, 325, 325))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtLugarCaptura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jdcFechaCaptura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComboBoxBarcos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(ComboBoxPuertos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                        .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)))
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttGuardar)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addComponent(btnBuscar)
                    .addComponent(btnActualizar))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private DefaultComboBoxModel<String> obtenerModeloBarcos() {
    DefaultComboBoxModel<String> comboBoxModelBarcos = new DefaultComboBoxModel<>();

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT nombre FROM Barcos");

        while (resultSet.next()) {
            String nombre = resultSet.getString("nombre");
            comboBoxModelBarcos.addElement(nombre);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return comboBoxModelBarcos;
}

    
    private DefaultComboBoxModel<String> obtenerModeloPuertos() {
    DefaultComboBoxModel<String> comboBoxModelPuertos = new DefaultComboBoxModel<>();

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT nombre FROM Puertos");

        while (resultSet.next()) {
            String nombre = resultSet.getString("nombre");
            comboBoxModelPuertos.addElement(nombre);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return comboBoxModelPuertos;
}

    
    
    
private int obtenerIdBarco(String nombreBarco) {
    int idBarco = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_barco FROM Barcos WHERE nombre = '" + nombreBarco + "'";
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            idBarco = resultSet.getInt("id_barco");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idBarco;
}

private int obtenerIdPuerto(String nombrePuerto) {
    int idPuerto = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_puerto FROM Puertos WHERE nombre = '" + nombrePuerto + "'";
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            idPuerto = resultSet.getInt("id_puerto");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idPuerto;
}


    private void bttGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttGuardarActionPerformed
             cargarDatosCompletoTabla();


String puertoSeleccionado = ComboBoxPuertos.getSelectedItem().toString();
int idPuerto = obtenerIdPuerto(puertoSeleccionado);

String barcoSeleccionado = ComboBoxBarcos.getSelectedItem().toString();
int idBarco = obtenerIdBarco(barcoSeleccionado);

// Obtener el valor del campo ID
String idText = txtID.getText().trim();
if (idText.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el ID");
    return;
}
String nombreRegistro = txtNombre.getText().trim();
if (nombreRegistro.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el nombre");
    return;
}
int id;
try {
    id = Integer.parseInt(idText);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID debe ser un número entero válido");
    return;
}

if (existeRegistroPesca(id)) {
    JOptionPane.showMessageDialog(null, "El ID de registro de pesca ya existe. Ingrese un ID único.");
    return;
}

// Obtener el valor del campo de lugar de captura
String lugarCaptura = txtLugarCaptura.getText().trim();
if (lugarCaptura.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el lugar de captura");
    return;
}

// Obtener el valor del campo de fecha de captura
Date fechaCaptura = null;
if (jdcFechaCaptura.getDate() != null) {
    fechaCaptura = jdcFechaCaptura.getDate();
} else {
    JOptionPane.showMessageDialog(null, "Seleccione una fecha de captura");
    return;
}

try {
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "INSERT INTO Registro_Pesca (id_registro_pesca, fecha_captura, lugar_captura, id_barco, id_puerto, nombre_registro) VALUES (?, ?, ?, ?, ?, ?)";
    PreparedStatement statement = connection.prepareStatement(query);

    statement.setInt(1, id);
    statement.setDate(2, new java.sql.Date(fechaCaptura.getTime()));
    statement.setString(3, lugarCaptura);
    statement.setInt(4, idBarco);
    statement.setInt(5, idPuerto);
    statement.setString(6, nombreRegistro);

    statement.executeUpdate();

    statement.close();
    connection.close();

    JOptionPane.showMessageDialog(null, "Registro exitoso");

    txtID.setText("");
    txtLugarCaptura.setText("");
    jdcFechaCaptura.setDate(null);
    ComboBoxBarcos.setSelectedIndex(0);
    ComboBoxPuertos.setSelectedIndex(0);
} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error al registrar el registro de pesca");
}

        cargarDatosCompletoTabla();


    }//GEN-LAST:event_bttGuardarActionPerformed
private boolean existeRegistroPesca(int idRegistroPesca) {
    boolean existe = false;
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT COUNT(*) AS count FROM Registro_Pesca WHERE id_registro_pesca = " + idRegistroPesca;
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            int count = resultSet.getInt("count");
            existe = (count > 0);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return existe;
}

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // Obtener el ID del registro de pesca a editar
String idRegistroPescaText = txtID.getText().trim();
if (idRegistroPescaText.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el ID del registro de pesca a editar");
    return;
}
int idRegistroPesca;
try {
    idRegistroPesca = Integer.parseInt(idRegistroPescaText);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID del registro de pesca debe ser un número entero válido");
    return; // Salir del método si el ID no es válido
}

String puertoSeleccionado = ComboBoxPuertos.getSelectedItem().toString();
int idPuerto = obtenerIdPuerto(puertoSeleccionado);

String barcoSeleccionado = ComboBoxBarcos.getSelectedItem().toString();
int idBarco = obtenerIdBarco(barcoSeleccionado);

// Obtener el valor del campo de nombre
String nombreRegistro = txtNombre.getText().trim();
if (nombreRegistro.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el nombre");
    return;
}

// Obtener el valor del campo de lugar de captura
String lugarCaptura = txtLugarCaptura.getText().trim();
if (lugarCaptura.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el lugar de captura");
    return;
}

// Obtener el valor del campo de fecha de captura
Date fechaCaptura = null;
if (jdcFechaCaptura.getDate() != null) {
    fechaCaptura = jdcFechaCaptura.getDate();
} else {
    JOptionPane.showMessageDialog(null, "Seleccione una fecha de captura");
    return;
}

try {
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "UPDATE Registro_Pesca SET fecha_captura = ?, lugar_captura = ?, id_barco = ?, id_puerto = ?, nombre_registro = ? WHERE id_registro_pesca = ?";
    PreparedStatement statement = connection.prepareStatement(query);

    statement.setDate(1, new java.sql.Date(fechaCaptura.getTime()));
    statement.setString(2, lugarCaptura);
    statement.setInt(3, idBarco);
    statement.setInt(4, idPuerto);
    statement.setString(5, nombreRegistro);
    statement.setInt(6, idRegistroPesca);

    statement.executeUpdate();

    statement.close();
    connection.close();

    JOptionPane.showMessageDialog(null, "Actualización exitosa");

    // Limpiar los campos de texto
    txtID.setText("");
    txtNombre.setText("");
    txtLugarCaptura.setText("");
    jdcFechaCaptura.setDate(null);
    ComboBoxBarcos.setSelectedIndex(0);
    ComboBoxPuertos.setSelectedIndex(0);

        cargarDatosCompletoTabla();

} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error al actualizar el registro de pesca");
}


    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
String idRegistroPescaText = JOptionPane.showInputDialog(null, "Ingrese el ID del registro de pesca a eliminar:");
if (idRegistroPescaText == null || idRegistroPescaText.isEmpty()) {
    return; // Salir del método si no se ingresa un ID válido
}

try {
    int idRegistroPesca = Integer.parseInt(idRegistroPescaText);

    // Obtener los datos del registro a eliminar
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "SELECT * FROM Registro_Pesca WHERE id_registro_pesca = ?";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setInt(1, idRegistroPesca);
    ResultSet resultSet = statement.executeQuery();

    // Verificar si se encontró el registro
    if (resultSet.next()) {
        // Obtener los campos del registro
        int id = resultSet.getInt("id_registro_pesca");
        Date fechaCaptura = resultSet.getDate("fecha_captura");
        String lugarCaptura = resultSet.getString("lugar_captura");
        int idBarco = resultSet.getInt("id_barco");
        int idPuerto = resultSet.getInt("id_puerto");

        // Mostrar los campos en un JOptionPane
        String mensaje = "ID Registro Pesca: " + id + "\n"
                + "Fecha de captura: " + fechaCaptura + "\n"
                + "Lugar de captura: " + lugarCaptura + "\n"
                + "ID de barco: " + idBarco + "\n"
                + "ID de puerto: " + idPuerto + "\n"
                + "\n¿Desea eliminar este registro de pesca?";

        int confirmacion = JOptionPane.showConfirmDialog(null, mensaje, "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Realizar la eliminación del registro
                String deleteQuery = "DELETE FROM Registro_Pesca WHERE id_registro_pesca = ?";
                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
                deleteStatement.setInt(1, idRegistroPesca);
                int filasAfectadas = deleteStatement.executeUpdate();

                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(null, "Registro de pesca eliminado exitosamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró ningún registro de pesca con el ID especificado");
                }

                // Actualizar los datos en la tabla
                      cargarDatosCompletoTabla();


                deleteStatement.close();
            } catch (SQLException e) {
                // Mostrar un mensaje de error si ocurre una excepción
                JOptionPane.showMessageDialog(null, "Error al eliminar el registro de pesca");
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "No se encontró ningún registro de pesca con el ID especificado");
    }

    // Cerrar la conexión y liberar recursos
    resultSet.close();
    statement.close();
    connection.close();

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID del registro de pesca debe ser un número entero válido");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos");
    e.printStackTrace();
}
       
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
// TODO add your handling code here:
    String nombreBusqueda = JOptionPane.showInputDialog(null, "Ingrese el nombre a buscar:");
    if (nombreBusqueda == null || nombreBusqueda.isEmpty()) {
        return; // Salir del método si no se ingresa un nombre válido
    }

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "SELECT id_registro_pesca, nombre_registro, fecha_captura, lugar_captura, b.nombre AS nombre_barco, p.nombre AS nombre_puerto FROM Registro_Pesca rp INNER JOIN Barcos b ON rp.id_barco = b.id_barco INNER JOIN Puertos p ON rp.id_puerto = p.id_puerto WHERE nombre_registro LIKE ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, "%" + nombreBusqueda + "%");
        ResultSet resultSet = statement.executeQuery();

        // Obtener los metadatos del resultado de la consulta
        ResultSetMetaData metaData = resultSet.getMetaData();

        // Obtener el número de columnas
        int numColumnas = metaData.getColumnCount();

        // Limpiar la tabla antes de cargar los datos nuevamente
        DefaultTableModel model = (DefaultTableModel) tablaRegistro.getModel();
        model.setRowCount(0);

        // Cargar los datos en la tabla
        cargarDatosEnTabla(resultSet, model);

        // Cerrar el resultado, la declaración y la conexión
        resultSet.close();
        statement.close();
        connection.close();

        // Mostrar un mensaje si no se encontraron resultados
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No se encontraron registros con el nombre especificado");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        // Mostrar un mensaje de error si ocurre una excepción
        JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda");
    }
       
    }//GEN-LAST:event_btnBuscarActionPerformed
private void cargarDatosEnTabla(ResultSet resultSet, DefaultTableModel model) throws SQLException {
    ResultSetMetaData metaData = resultSet.getMetaData();
    int numColumnas = metaData.getColumnCount();

    while (resultSet.next()) {
        Object[] fila = new Object[numColumnas];
        for (int i = 1; i <= numColumnas; i++) {
            Object valor = resultSet.getObject(i);

            if (valor instanceof java.sql.Date) {
                // Agregar 2 días a la fecha
                java.sql.Date fecha = (java.sql.Date) valor;
                Calendar cal = Calendar.getInstance();
                cal.setTime(fecha);
                cal.add(Calendar.DAY_OF_MONTH, 2);
                fila[i - 1] = new java.sql.Date(cal.getTimeInMillis());
            } else {
                fila[i - 1] = valor;
            }
        }
        model.addRow(fila);
    }
}

private void cargarDatosCompletoTabla() {
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();

        String query = "SELECT id_registro_pesca, nombre_registro, fecha_captura, lugar_captura, b.nombre AS nombre_barco, p.nombre AS nombre_puerto FROM Registro_Pesca rp INNER JOIN Barcos b ON rp.id_barco = b.id_barco INNER JOIN Puertos p ON rp.id_puerto = p.id_puerto";
        ResultSet resultSet = statement.executeQuery(query);

        // Limpiar la tabla antes de cargar los datos nuevamente
        DefaultTableModel model = (DefaultTableModel) tablaRegistro.getModel();
        model.setRowCount(0);

        // Cargar los datos en la tabla
        cargarDatosEnTabla(resultSet, model);

        // Cerrar el resultado, la declaración y la conexión
        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos de la tabla");
    }
}
    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
                cargarDatosCompletoTabla();
;
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
int selectedRow = tablaRegistro.getSelectedRow();
    if (selectedRow >= 0) {
        DefaultTableModel model = (DefaultTableModel) tablaRegistro.getModel();
        int id = (int) model.getValueAt(selectedRow, 0);
        String nombre = (String) model.getValueAt(selectedRow, 1);
        java.sql.Date fechaPesca = (java.sql.Date) model.getValueAt(selectedRow, 2);
        String lugarCaptura = (String) model.getValueAt(selectedRow, 3);
        String nombrePuerto = (String) model.getValueAt(selectedRow, 5);
        String nombreBarco = (String) model.getValueAt(selectedRow, 4);

        SimpleDateFormat displayDateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String fechaPescaStr = displayDateFormat.format(fechaPesca);

        try {
            Date fechaPescaDate = displayDateFormat.parse(fechaPescaStr);
            jdcFechaCaptura.setDate(fechaPescaDate);
        } catch (ParseException ex) {
            ex.printStackTrace();
        }

        // Obtener el índice del elemento seleccionado en el combo box
        int indexBarco = ComboBoxBarcos.getSelectedIndex();
        int indexPuerto = ComboBoxPuertos.getSelectedIndex();

        // Establecer el valor seleccionado usando el índice obtenido
        ComboBoxBarcos.setSelectedItem(nombreBarco);
        ComboBoxPuertos.setSelectedItem(nombrePuerto);

        txtLugarCaptura.setText(lugarCaptura);
        txtID.setText(String.valueOf(id));
        txtNombre.setText(nombre);
    }
    }//GEN-LAST:event_btnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxBarcos;
    private javax.swing.JComboBox<String> ComboBoxPuertos;
    private javax.swing.JButton btn;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton bttGuardar;
    private javax.swing.JPanel content;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcFechaCaptura;
    private javax.swing.JTable tablaRegistro;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLugarCaptura;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
