/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import java.util.TimeZone;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anyel
 */
public class Tripulación extends javax.swing.JPanel {

    /**
     * Creates new form Page1
     */
    public Tripulación() {
        initComponents();
        DefaultComboBoxModel<String> comboBoxModelRoles = obtenerModeloRoles();
        comboBoxRoles.setModel(comboBoxModelRoles);
        DefaultComboBoxModel<String> comboBoxModelBarcos = obtenerModeloBarcos();
        ComboBoxBarcos.setModel(comboBoxModelBarcos);
        cargarDatosCompletoTabla();


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        jdcFechaInicio = new com.toedter.calendar.JDateChooser();
        btnGuardar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jdcFechaFin = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ComboBoxBarcos = new javax.swing.JComboBox<>();
        comboBoxRoles = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTri = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btn = new javax.swing.JButton();

        content.setBackground(new java.awt.Color(25, 118, 211));

        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setBorderPainted(false);
        btnGuardar.setContentAreaFilled(false);
        btnGuardar.setDefaultCapable(false);
        btnGuardar.setFocusPainted(false);
        btnGuardar.setFocusable(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Fecha de Inicio:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Fecha de Fin:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ID Tripulación:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText(" Tripulación");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Nombre: ");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Barco:");

        ComboBoxBarcos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboBoxRoles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Rol:");

        tablaTri.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID Tripulación", "Nombre", "Fecha Inicio", "Fecha Fin", "Barco", "Rol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaTri);

        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editar.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setBorderPainted(false);
        btnEditar.setContentAreaFilled(false);
        btnEditar.setDefaultCapable(false);
        btnEditar.setFocusPainted(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/basura.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorderPainted(false);
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setDefaultCapable(false);
        btnEliminar.setFocusPainted(false);
        btnEliminar.setFocusable(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/buscar-alt.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setDefaultCapable(false);
        btnBuscar.setFocusPainted(false);
        btnBuscar.setFocusable(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/actualizar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setBorderPainted(false);
        btnActualizar.setContentAreaFilled(false);
        btnActualizar.setDefaultCapable(false);
        btnActualizar.setFocusPainted(false);
        btnActualizar.setFocusable(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/seleccion.png"))); // NOI18N
        btn.setBorderPainted(false);
        btn.setContentAreaFilled(false);
        btn.setDefaultCapable(false);
        btn.setFocusPainted(false);
        btn.setFocusable(false);
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(383, 383, 383)
                        .addComponent(jLabel6))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addComponent(btnGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEliminar)
                                .addGap(207, 207, 207)
                                .addComponent(btnBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnActualizar))
                            .addGroup(contentLayout.createSequentialGroup()
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(contentLayout.createSequentialGroup()
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ComboBoxBarcos, javax.swing.GroupLayout.Alignment.LEADING, 0, 197, Short.MAX_VALUE)
                                            .addComponent(txtID))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(18, 18, 18)
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(comboBoxRoles, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jdcFechaInicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jdcFechaFin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn)))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel6)
                .addGap(23, 23, 23)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(jdcFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdcFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addComponent(jLabel2)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComboBoxBarcos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn)
                        .addGap(61, 61, 61)))
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addComponent(btnBuscar)
                    .addComponent(btnActualizar))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
 private DefaultComboBoxModel<String> obtenerModeloRoles() {
    DefaultComboBoxModel<String> comboBoxModelRoles = new DefaultComboBoxModel<>();

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT nombre FROM Roles");

        while (resultSet.next()) {
            String nombre = resultSet.getString("nombre");
            comboBoxModelRoles.addElement(nombre);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return comboBoxModelRoles;
}
private DefaultComboBoxModel<String> obtenerModeloBarcos() {
    DefaultComboBoxModel<String> ComboBoxBarcos = new DefaultComboBoxModel<>();

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT nombre FROM Barcos");

        while (resultSet.next()) {
            String nombre = resultSet.getString("nombre");
            ComboBoxBarcos.addElement(nombre);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return ComboBoxBarcos;
}



    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
       String barcoSeleccionado = ComboBoxBarcos.getSelectedItem().toString();
int idBarco = obtenerIdBarco(barcoSeleccionado);

// Obtener el valor del campo de ID
String idText = txtID.getText().trim();
if (idText.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el ID del tripulante");
    return;
}
int id;
try {
    id = Integer.parseInt(idText);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID del tripulante debe ser un número entero válido");
    return;
}

// Obtener el valor del campo de nombre
String nombre = txtNombre.getText().trim();
if (nombre.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el nombre del tripulante");
    return;
}

// Obtener el valor del campo de fecha de inicio
Date fechaInicio = jdcFechaInicio.getDate();
if (fechaInicio == null) {
    JOptionPane.showMessageDialog(null, "Seleccione una fecha de inicio");
    return;
}

// Obtener el valor del campo de fecha de fin
Date fechaFin = jdcFechaFin.getDate();
if (fechaFin == null) {
    JOptionPane.showMessageDialog(null, "Seleccione una fecha de fin");
    return;
}

// Validar que la fecha de fin sea posterior o igual a la fecha de inicio
if (fechaFin.compareTo(fechaInicio) < 0) {
    JOptionPane.showMessageDialog(null, "La fecha de fin no puede ser anterior a la fecha de inicio");
    return;
}

String rolSeleccionado = comboBoxRoles.getSelectedItem().toString();
int idRol = obtenerIdRol(rolSeleccionado);

try {
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "UPDATE Tripulaciones SET nombre = ?, fecha_inicio = ?, fecha_fin = ?, id_barco = ?, id_rol = ? WHERE id_tripulacion = ?";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setString(1, nombre);
    statement.setDate(2, new java.sql.Date(fechaInicio.getTime()));
    statement.setDate(3, new java.sql.Date(fechaFin.getTime()));
    statement.setInt(4, idBarco);
    statement.setInt(5, idRol);
    statement.setInt(6, id);
    statement.executeUpdate();

    // Cerrar la conexión y liberar recursos
    statement.close();
    connection.close();

    // Mostrar un mensaje de éxito
    JOptionPane.showMessageDialog(null, "Actualización exitosa");

    // Limpiar los campos de texto
    txtID.setText("");
    txtNombre.setText("");
    jdcFechaInicio.setDate(null);
    jdcFechaFin.setDate(null);

    // Actualizar los datos en la tabla
        cargarDatosCompletoTabla();

} catch (SQLException e) {
    e.printStackTrace();
    // Mostrar un mensaje de error si ocurre una excepción
    JOptionPane.showMessageDialog(null, "Error al actualizar el tripulante");
}


    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        cargarDatosCompletoTabla();
        String barcoSeleccionado = ComboBoxBarcos.getSelectedItem().toString();
        int idBarco = obtenerIdBarco(barcoSeleccionado);

        // Obtener el valor del campo de ID
        String idText = txtID.getText().trim();
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese el ID");
            return;
        }
        int id;
        try {
            id = Integer.parseInt(idText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El ID debe ser un número entero válido");
            return;
        }

        // Obtener el valor del campo de nombre
        String nombre = txtNombre.getText().trim();
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese el nombre");
            return;
        }

        // Obtener el valor del campo de fecha de inicio
        Date fechaInicio = null;
        if (jdcFechaInicio.getDate() != null) {
            fechaInicio = jdcFechaInicio.getDate();
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una fecha de inicio");
            return;
        }

        // Obtener el valor del campo de fecha de fin
        Date fechaFin = null;
        if (jdcFechaFin.getDate() != null) {
            fechaFin = jdcFechaFin.getDate();
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una fecha de fin");
            return;
        }

        // Validar que la fecha de fin sea posterior o igual a la fecha de inicio
        if (fechaFin.compareTo(fechaInicio) < 0) {
            JOptionPane.showMessageDialog(null, "La fecha de fin no puede ser anterior a la fecha de inicio");
            return;
        }

        // Resto de la validación y acciones
        // ...

        String rolSeleccionado = comboBoxRoles.getSelectedItem().toString();
        int idRol = obtenerIdRol(rolSeleccionado);

        if (existeTripulante(id)) {
            JOptionPane.showMessageDialog(null, "El ID del tripulante ya existe");
            return;
        }

        try {
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
            String query = "INSERT INTO Tripulaciones (id_tripulacion, nombre, fecha_inicio, fecha_fin, id_barco, id_rol) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(query);

            statement.setInt(1, id);
            statement.setString(2, nombre);
            statement.setDate(3, new java.sql.Date(fechaInicio.getTime()));
            statement.setDate(4, new java.sql.Date(fechaFin.getTime()));
            statement.setInt(5, idBarco);
            statement.setInt(6, idRol);

            statement.executeUpdate();

            statement.close();
            connection.close();

            JOptionPane.showMessageDialog(null, "Registro exitoso");

            txtID.setText("");
            txtNombre.setText("");
            jdcFechaInicio.setDate(null);
            jdcFechaFin.setDate(null);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al registrar el tripulante");
        }

        cargarDatosCompletoTabla();

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
            String idTripulanteText = JOptionPane.showInputDialog(null, "Ingrese el ID del tripulante a eliminar:");
     if (idTripulanteText == null || idTripulanteText.isEmpty()) {
         return; // Salir del método si no se ingresa un ID válido
     }
     try {
         int idTripulante = Integer.parseInt(idTripulanteText);

         // Obtener los datos del registro a eliminar
         Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
         String query = "SELECT * FROM Tripulaciones WHERE id_tripulacion = ?";
         PreparedStatement statement = connection.prepareStatement(query);
         statement.setInt(1, idTripulante);
         ResultSet resultSet = statement.executeQuery();

         // Verificar si se encontró el registro
         if (resultSet.next()) {
             // Obtener los campos del registro
             int id = resultSet.getInt("id_tripulacion");
             String nombre = resultSet.getString("nombre");
             Date fechaInicio = resultSet.getDate("fecha_inicio");
             Date fechaFin = resultSet.getDate("fecha_fin");
             int idBarco = resultSet.getInt("id_barco");
             int idRol = resultSet.getInt("id_rol");

             // Mostrar los campos en un JOptionPane
             String mensaje = "ID: " + id + "\n"
                     + "Nombre: " + nombre + "\n"
                     + "Fecha de inicio: " + fechaInicio + "\n"
                     + "Fecha de fin: " + fechaFin + "\n"
                     + "ID de barco: " + idBarco + "\n"
                     + "ID de rol: " + idRol + "\n"
                     + "\n¿Desea eliminar este registro?";

             int confirmacion = JOptionPane.showConfirmDialog(null, mensaje, "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
             if (confirmacion == JOptionPane.YES_OPTION) {
                 try {
                     // Realizar la eliminación del registro
                     String deleteQuery = "DELETE FROM Tripulaciones WHERE id_tripulacion = ?";
                     PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
                     deleteStatement.setInt(1, idTripulante);
                     int filasAfectadas = deleteStatement.executeUpdate();

                     if (filasAfectadas > 0) {
                         JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente");
                     } else {
                         JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID especificado");
                     }

                     // Actualizar los datos en la tabla
        cargarDatosCompletoTabla();

                     deleteStatement.close();
                 } catch (SQLException e) {
                     // Mostrar un mensaje de error si ocurre una excepción
                     JOptionPane.showMessageDialog(null, "Error al eliminar el registro del tripulante");
                 }
             }
         } else {
             JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID especificado");
         }

         // Cerrar la conexión y liberar recursos
         resultSet.close();
         statement.close();
         connection.close();

     } catch (NumberFormatException e) {
         JOptionPane.showMessageDialog(null, "El ID del tripulante debe ser un número entero válido");
     } catch (SQLException e) {
         JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos");
         e.printStackTrace();
     }


    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
         String nombreBusqueda = JOptionPane.showInputDialog(null, "Ingrese el nombre a buscar:");
    if (nombreBusqueda == null || nombreBusqueda.isEmpty()) {
        return; // Salir del método si no se ingresa un nombre válido
    }
    
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "SELECT id_tripulacion, nombre, fecha_inicio, fecha_fin, nombre_barco, nombre_rol FROM VistaTripulaciones WHERE nombre LIKE ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, "%" + nombreBusqueda + "%");
        ResultSet resultSet = statement.executeQuery();

        // Limpiar la tabla antes de cargar los datos nuevamente
        DefaultTableModel model = (DefaultTableModel) tablaTri.getModel();
        model.setRowCount(0);

        // Cargar los datos en la tabla
        cargarDatosEnTabla(resultSet, model);

        // Cerrar el resultado, la declaración y la conexión
        resultSet.close();
        statement.close();
        connection.close();

        // Mostrar un mensaje si no se encontraron resultados
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No se encontraron registros con el nombre especificado");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        // Mostrar un mensaje de error si ocurre una excepción
        JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda");
    }
}

private void cargarDatosEnTabla(ResultSet resultSet, DefaultTableModel model) throws SQLException {
        ResultSetMetaData metaData = resultSet.getMetaData();
    int numColumnas = metaData.getColumnCount();

    while (resultSet.next()) {
        Object[] fila = new Object[numColumnas];
        for (int i = 1; i <= numColumnas; i++) {
            Object valor = resultSet.getObject(i);

            if (valor instanceof java.sql.Date) {
                // Agregar 2 días a la fecha
                java.sql.Date fecha = (java.sql.Date) valor;
                Calendar cal = Calendar.getInstance();
                cal.setTime(fecha);
                cal.add(Calendar.DAY_OF_MONTH, 2);
                fila[i - 1] = new java.sql.Date(cal.getTimeInMillis());
            } else {
                fila[i - 1] = valor;
            }
        }
        model.addRow(fila);
    }

    }//GEN-LAST:event_btnBuscarActionPerformed
private void cargarDatosCompletoTabla() {
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();

        String query = "SELECT id_tripulacion, nombre, fecha_inicio, fecha_fin, nombre_barco, nombre_rol FROM VistaTripulaciones";
        ResultSet resultSet = statement.executeQuery(query);

        // Limpiar la tabla antes de cargar los datos nuevamente
        DefaultTableModel model = (DefaultTableModel) tablaTri.getModel();
        model.setRowCount(0);

        // Cargar los datos en la tabla
        cargarDatosEnTabla(resultSet, model);

        // Cerrar el resultado, la declaración y la conexión
        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos de la tabla");
    }
}

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        cargarDatosCompletoTabla();
        DefaultComboBoxModel<String> comboBoxModelRoles = obtenerModeloRoles();
        comboBoxRoles.setModel(comboBoxModelRoles);
        DefaultComboBoxModel<String> comboBoxModelBarcos = obtenerModeloBarcos();
        ComboBoxBarcos.setModel(comboBoxModelBarcos);

    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        // TODO add your handling code here:
     int selectedRow = tablaTri.getSelectedRow();
if (selectedRow != -1) {
    DefaultTableModel model = (DefaultTableModel) tablaTri.getModel();
    int id = (int) model.getValueAt(selectedRow, 0);
    String nombre = (String) model.getValueAt(selectedRow, 1);
    java.sql.Date fechaInicio = (java.sql.Date) model.getValueAt(selectedRow, 2);
    java.sql.Date fechaFin = (java.sql.Date) model.getValueAt(selectedRow, 3);
    String nombreBarco = (String) model.getValueAt(selectedRow, 4);
    String nombreRol = (String) model.getValueAt(selectedRow, 5);

    txtID.setText(String.valueOf(id));
    txtNombre.setText(nombre);

    // Convertir fechaInicio y fechaFin a String
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    String fechaInicioStr = dateFormat.format(fechaInicio);
    String fechaFinStr = dateFormat.format(fechaFin);

    jdcFechaInicio.setDate(fechaInicio);
    jdcFechaFin.setDate(fechaFin);

    ComboBoxBarcos.setSelectedItem(nombreBarco);
    comboBoxRoles.setSelectedItem(nombreRol);
}

    }//GEN-LAST:event_btnActionPerformed
private boolean existeTripulante(int idTripulante) {
    boolean existe = false;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT COUNT(*) AS count FROM Tripulaciones WHERE id_tripulacion = " + idTripulante;
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            int count = resultSet.getInt("count");
            existe = (count > 0);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return existe;
}

private int obtenerIdRol(String nombreRol) {
    int idRol = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_rol FROM Roles WHERE nombre = '" + nombreRol + "'";
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            idRol = resultSet.getInt("id_rol");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idRol;
}

private int obtenerIdBarco(String nombreBarco) {
    int idBarco = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_barco FROM Barcos WHERE nombre = '" + nombreBarco + "'";
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            idBarco = resultSet.getInt("id_barco");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idBarco;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxBarcos;
    private javax.swing.JButton btn;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> comboBoxRoles;
    private javax.swing.JPanel content;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcFechaFin;
    private com.toedter.calendar.JDateChooser jdcFechaInicio;
    private javax.swing.JTable tablaTri;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
