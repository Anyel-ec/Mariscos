/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import java.awt.Cursor;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anyel
 */
public class Captura extends javax.swing.JPanel {

    /**
     * Creates new form Captura
     */
    public Captura() {
        initComponents();
        cargarDatosTabla();
        


    comboBoxRegistro.setModel(obtenerModeloRegistroPesca());

    // Llamada al método obtenerModeloEspecie para obtener el modelo de datos del ComboBox de especie
    DefaultComboBoxModel<String> modeloEspecie = obtenerModeloEspecie();

    // Asignar el modelo al ComboBox de especie
    comboBoxEspecie.setModel(modeloEspecie);
    // Declaración e inicialización del modelo del ComboBox de Registro de Pesca
    


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        comboBoxRegistro = new javax.swing.JComboBox<>();
        comboBoxEspecie = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCaptura = new javax.swing.JTable();
        bttGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btn = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(25, 118, 211));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Captura");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ID Captura:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Registro:");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Cantidad: ");

        comboBoxRegistro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboBoxEspecie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Especie: ");

        tablaCaptura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Captura", "Nombre Registro", "Cantidad", "Especie"
            }
        ));
        jScrollPane1.setViewportView(tablaCaptura);

        bttGuardar.setForeground(new java.awt.Color(255, 255, 255));
        bttGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/guardar.png"))); // NOI18N
        bttGuardar.setText("Guardar");
        bttGuardar.setBorderPainted(false);
        bttGuardar.setContentAreaFilled(false);
        bttGuardar.setDefaultCapable(false);
        bttGuardar.setFocusPainted(false);
        bttGuardar.setFocusable(false);
        bttGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bttGuardarMouseEntered(evt);
            }
        });
        bttGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttGuardarActionPerformed(evt);
            }
        });

        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editar.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setBorderPainted(false);
        btnEditar.setContentAreaFilled(false);
        btnEditar.setDefaultCapable(false);
        btnEditar.setFocusPainted(false);
        btnEditar.setFocusable(false);
        btnEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEditarMouseEntered(evt);
            }
        });
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/basura.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorderPainted(false);
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setDefaultCapable(false);
        btnEliminar.setFocusPainted(false);
        btnEliminar.setFocusable(false);
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEliminarMouseEntered(evt);
            }
        });
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/buscar-alt.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setDefaultCapable(false);
        btnBuscar.setFocusPainted(false);
        btnBuscar.setFocusable(false);
        btnBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBuscarMouseEntered(evt);
            }
        });
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(255, 255, 255));
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/actualizar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setBorderPainted(false);
        btnActualizar.setContentAreaFilled(false);
        btnActualizar.setDefaultCapable(false);
        btnActualizar.setFocusPainted(false);
        btnActualizar.setFocusable(false);
        btnActualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnActualizarMouseEntered(evt);
            }
        });
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/seleccion.png"))); // NOI18N
        btn.setBorderPainted(false);
        btn.setContentAreaFilled(false);
        btn.setDefaultCapable(false);
        btn.setFocusPainted(false);
        btn.setFocusable(false);
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(371, 371, 371)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxRegistro, 0, 211, Short.MAX_VALUE)
                                    .addComponent(txtID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(comboBoxEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bttGuardar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnBuscar))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(89, 89, 89)
                                        .addComponent(btnEditar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnEliminar)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActualizar)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(4, 4, 4)))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttGuardar)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addComponent(btnBuscar)
                    .addComponent(btnActualizar))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
private void cargarDatosTabla() {
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_captura, nombre_registro, cantidad, nombre_especie FROM VistaCapturas";
        ResultSet resultSet = statement.executeQuery(query);

        // Limpiar datos existentes en la tabla
        DefaultTableModel model = (DefaultTableModel) tablaCaptura.getModel();
        model.setRowCount(0);

        // Recorrer el resultado de la consulta y agregar filas a la tabla
        while (resultSet.next()) {
            int idCaptura = resultSet.getInt("id_captura");
            String nombreRegistro = resultSet.getString("nombre_registro");
            int cantidad = resultSet.getInt("cantidad");
            String nombreEspecie = resultSet.getString("nombre_especie");

            // Agregar fila a la tabla
            model.addRow(new Object[]{idCaptura, nombreRegistro, cantidad, nombreEspecie});
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    
    
    private DefaultComboBoxModel<String> obtenerModeloRegistroPesca() {
    DefaultComboBoxModel<String> comboBoxModelRegistroPesca = new DefaultComboBoxModel<>();
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT nombre_registro FROM Registro_Pesca");
        while (resultSet.next()) {
            String nombre = resultSet.getString("nombre_registro");
            // Formatear los datos según tus necesidades
            comboBoxModelRegistroPesca.addElement(nombre);
        }
        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return comboBoxModelRegistroPesca;
}


    private void bttGuardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bttGuardarMouseEntered
        bttGuardar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:

    }//GEN-LAST:event_bttGuardarMouseEntered

    private void bttGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttGuardarActionPerformed
    // Validar ID de captura
    int idCaptura;
    String idCapturaText = txtID.getText().trim();
    if (idCapturaText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese el ID de captura");
        return;
    }
    try {
        idCaptura = Integer.parseInt(idCapturaText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El ID de captura debe ser un número entero válido");
        return; // Salir del método si el ID de captura no es válido
    }
    // Validar existencia del ID de captura
    if (existeCaptura(idCaptura)) {
        JOptionPane.showMessageDialog(null, "El ID de captura ya existe");
        return; // Salir del método si el ID de captura ya existe
    }

    // Obtener los valores de los campos de texto y combobox
    int idRegistro = obtenerIdRegistroPesca(comboBoxRegistro.getSelectedItem().toString());
    int cantidad;
    String cantidadText = txtCantidad.getText().trim();
    if (cantidadText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese la cantidad");
        return;
    }
    try {
        cantidad = Integer.parseInt(cantidadText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "La cantidad debe ser un número entero válido");
        return; // Salir del método si la cantidad no es válida
    }
    int idEspecie = obtenerIdEspecie(comboBoxEspecie.getSelectedItem().toString());

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String sql = "INSERT INTO Capturas (id_captura, id_registro_pesca, cantidad, id_especie) VALUES (?, ?, ?, ?)";
        PreparedStatement statement = connection.prepareStatement(sql);

        statement.setInt(1, idCaptura);
        statement.setInt(2, idRegistro);
        statement.setInt(3, cantidad);
        statement.setInt(4, idEspecie);

        int filasInsertadas = statement.executeUpdate();
        if (filasInsertadas > 0) {
            JOptionPane.showMessageDialog(this, "Captura insertada correctamente");
            txtID.setText("");
            txtCantidad.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Error al insertar la captura");
        }

        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }    
    cargarDatosTabla();

        
    }//GEN-LAST:event_bttGuardarActionPerformed
private int obtenerIdMantenimiento(String descripcionMantenimiento) {
    int idMantenimiento = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_mantenimiento FROM Mantenimiento WHERE descripcion = '" + descripcionMantenimiento + "'";
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            idMantenimiento = resultSet.getInt("id_mantenimiento");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idMantenimiento;
}
    private void btnEditarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarMouseEntered
        btnEditar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditarMouseEntered

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
// Validar ID de captura
    int idCaptura;
    String idCapturaText = txtID.getText().trim();
    if (idCapturaText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese el ID de captura");
        return;
    }
    try {
        idCaptura = Integer.parseInt(idCapturaText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El ID de captura debe ser un número entero válido");
        return; // Salir del método si el ID de captura no es válido
    }
    // Validar existencia del ID de captura
    if (!existeCaptura(idCaptura)) {
        JOptionPane.showMessageDialog(null, "El ID de captura no existe");
        return; // Salir del método si el ID de captura no existe
    }

    // Obtener los valores de los campos de texto y combobox
    int idRegistro = obtenerIdRegistroPesca(comboBoxRegistro.getSelectedItem().toString());
    int cantidad;
    String cantidadText = txtCantidad.getText().trim();
    if (cantidadText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese la cantidad");
        return;
    }
    try {
        cantidad = Integer.parseInt(cantidadText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "La cantidad debe ser un número entero válido");
        return; // Salir del método si la cantidad no es válida
    }
    int idEspecie = obtenerIdEspecie(comboBoxEspecie.getSelectedItem().toString());

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String sql = "UPDATE Capturas SET id_registro_pesca = ?, cantidad = ?, id_especie = ? WHERE id_captura = ?";
        PreparedStatement statement = connection.prepareStatement(sql);

        statement.setInt(1, idRegistro);
        statement.setInt(2, cantidad);
        statement.setInt(3, idEspecie);
        statement.setInt(4, idCaptura);

        int filasActualizadas = statement.executeUpdate();
        if (filasActualizadas > 0) {
            JOptionPane.showMessageDialog(this, "Captura actualizada correctamente");
            txtID.setText("");
            txtCantidad.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar la captura");
        }

        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    cargarDatosTabla();        

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseEntered
        btnEliminar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarMouseEntered

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
String idCapturaText = JOptionPane.showInputDialog(null, "Ingrese el ID de captura a eliminar:");
if (idCapturaText == null || idCapturaText.isEmpty()) {
    return; // Salir del método si no se ingresa un ID válido
}
try {
    int idCaptura = Integer.parseInt(idCapturaText);

    // Obtener los datos del registro a eliminar
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "SELECT * FROM Capturas WHERE id_captura = ?";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setInt(1, idCaptura);
    ResultSet resultSet = statement.executeQuery();

    // Verificar si se encontró el registro
    if (resultSet.next()) {
        // Obtener los campos del registro
        int idRegistro = resultSet.getInt("id_registro_pesca");
        int cantidad = resultSet.getInt("cantidad");
        int idEspecie = resultSet.getInt("id_especie");

        // Mostrar los campos en un JOptionPane
        String mensaje = "ID de captura: " + idCaptura + "\n"
                + "ID de registro de pesca: " + idRegistro + "\n"
                + "Cantidad: " + cantidad + "\n"
                + "ID de especie: " + idEspecie + "\n"
                + "\n¿Desea eliminar este registro?";

        int confirmacion = JOptionPane.showConfirmDialog(null, mensaje, "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Realizar la eliminación del registro
                String deleteQuery = "DELETE FROM Capturas WHERE id_captura = ?";
                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
                deleteStatement.setInt(1, idCaptura);
                int filasAfectadas = deleteStatement.executeUpdate();

                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID especificado");
                }

                // Actualizar los datos en la tabla
                cargarDatosTabla();

                deleteStatement.close();
            } catch (SQLException e) {
                // Mostrar un mensaje de error si ocurre una excepción
                JOptionPane.showMessageDialog(null, "Error al eliminar el registro de captura");
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID especificado");
    }

    // Cerrar la conexión y liberar recursos
    resultSet.close();
    statement.close();
    connection.close();

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID de captura debe ser un número entero válido");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos");
    e.printStackTrace();
}
        

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarMouseEntered
        btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarMouseEntered

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
String nombreEspecieBusqueda = JOptionPane.showInputDialog(null, "Ingrese el nombre de especie a buscar:");
if (nombreEspecieBusqueda == null || nombreEspecieBusqueda.isEmpty()) {
    return; // Salir del método si no se ingresa un nombre válido
}
try {
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "SELECT * FROM VistaCapturas WHERE nombre_especie LIKE ?";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setString(1, "%" + nombreEspecieBusqueda + "%");
    ResultSet resultSet = statement.executeQuery();

    // Obtener los metadatos del resultado de la consulta
    ResultSetMetaData metaData = resultSet.getMetaData();

    // Obtener el número de columnas
    int numColumnas = metaData.getColumnCount();

    // Limpiar la tabla
    DefaultTableModel model = (DefaultTableModel) tablaCaptura.getModel();
    model.setRowCount(0);

    // Recorrer el resultado de la consulta y agregar las filas a la tabla
    while (resultSet.next()) {
        Object[] fila = new Object[numColumnas];
        for (int i = 1; i <= numColumnas; i++) {
            fila[i - 1] = resultSet.getObject(i);
        }
        model.addRow(fila);
    }

    // Cerrar el resultado, la declaración y la conexión
    resultSet.close();
    statement.close();
    connection.close();

    // Mostrar un mensaje si no se encontraron resultados
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(null, "No se encontraron capturas con el nombre de especie especificado");
    }

} catch (SQLException e) {
    e.printStackTrace();
    // Mostrar un mensaje de error si ocurre una excepción
    JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda");
}

       

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnActualizarMouseEntered
        btnActualizar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActualizarMouseEntered

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
       cargarDatosTabla();
        


    comboBoxRegistro.setModel(obtenerModeloRegistroPesca());

    // Llamada al método obtenerModeloEspecie para obtener el modelo de datos del ComboBox de especie
    DefaultComboBoxModel<String> modeloEspecie = obtenerModeloEspecie();

    // Asignar el modelo al ComboBox de especie
    comboBoxEspecie.setModel(modeloEspecie);
    // Declaración e inicialización del modelo del ComboBox de Registro de Pesca
        
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        // TODO add your handling code here:
// TODO add your handling code here:
int filaSeleccionada = tablaCaptura.getSelectedRow();
if (filaSeleccionada >= 0) {
    // Obtener los valores de la fila seleccionada
    int idCaptura = Integer.parseInt(tablaCaptura.getValueAt(filaSeleccionada, 0).toString());
    
    String registro = (String) tablaCaptura.getValueAt(filaSeleccionada, 1);
    int cantidad = Integer.parseInt(tablaCaptura.getValueAt(filaSeleccionada, 2).toString());
    String especie = (String) tablaCaptura.getValueAt(filaSeleccionada, 3);

    // Mostrar los valores en los campos de texto correspondientes
    txtID.setText(String.valueOf(idCaptura));
    
    comboBoxRegistro.setSelectedItem(registro);
    txtCantidad.setText(String.valueOf(cantidad));
    comboBoxEspecie.setSelectedItem(especie);
}


    }//GEN-LAST:event_btnActionPerformed




private int obtenerIdEspecie(String nombreEspecie) {
    int idEspecie = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_especie FROM Especies WHERE nombre = '" + nombreEspecie + "'";
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            idEspecie = resultSet.getInt("id_especie");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idEspecie;
}





private DefaultComboBoxModel<String> obtenerModeloEspecie() {
    DefaultComboBoxModel<String> comboBoxModelEspecie = new DefaultComboBoxModel<>();

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT nombre FROM Especies");

        while (resultSet.next()) {
            String nombre = resultSet.getString("nombre");
            comboBoxModelEspecie.addElement(nombre);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return comboBoxModelEspecie;
}
private int obtenerIdRegistroPesca(String seleccionRegistroPesca) {
    int idRegistroPesca = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "SELECT id_registro_pesca FROM Registro_Pesca WHERE nombre_registro = ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, seleccionRegistroPesca);
        ResultSet resultSet = statement.executeQuery();

        if (resultSet.next()) {
            idRegistroPesca = resultSet.getInt("id_registro_pesca");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idRegistroPesca;
}



private boolean existeCaptura(int idCaptura) {
    boolean existe = false;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String sql = "SELECT COUNT(*) AS count FROM Capturas WHERE id_captura = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setInt(1, idCaptura);
        ResultSet resultSet = statement.executeQuery();

        if (resultSet.next()) {
            int count = resultSet.getInt("count");
            if (count > 0) {
                existe = true;
            }
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return existe;
}








    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton bttGuardar;
    private javax.swing.JComboBox<String> comboBoxEspecie;
    private javax.swing.JComboBox<String> comboBoxRegistro;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCaptura;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables
}
