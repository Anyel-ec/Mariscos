/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anyel
 */
public class Barco extends javax.swing.JPanel {

    /**
     * Creates new form Page1
     */
    public Barco() {
        initComponents();
        
    DefaultComboBoxModel<String> comboBoxModelMantenimiento = obtenerModeloMantenimiento();
    ComboBoxMantenimiento.setModel(comboBoxModelMantenimiento);
    
    // Cargar datos de la vista en la tabla al iniciar el formulario
    cargarDatosTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        content = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtIdBarco = new javax.swing.JTextField();
        txtCapacidad = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtTipo = new javax.swing.JTextField();
        ComboBoxMantenimiento = new javax.swing.JComboBox<>();
        bttGuardar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBarco = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btn = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        content.setBackground(new java.awt.Color(25, 118, 211));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Barco");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ID Barco: ");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Nombre: ");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Modelo:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Capacidad de Carga:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Mantenimiento:");

        txtIdBarco.setText(" ");

        txtCapacidad.setText(" ");

        txtNombre.setText(" ");

        txtTipo.setText(" ");

        ComboBoxMantenimiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        bttGuardar.setForeground(new java.awt.Color(255, 255, 255));
        bttGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/guardar.png"))); // NOI18N
        bttGuardar.setText("Guardar");
        bttGuardar.setBorderPainted(false);
        bttGuardar.setContentAreaFilled(false);
        bttGuardar.setDefaultCapable(false);
        bttGuardar.setFocusPainted(false);
        bttGuardar.setFocusable(false);
        bttGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bttGuardarMouseEntered(evt);
            }
        });
        bttGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttGuardarActionPerformed(evt);
            }
        });

        tableBarco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Modelo", "Capacidad", "Mantenimiento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableBarco.setSelectionBackground(new java.awt.Color(23, 35, 51));
        tableBarco.setSelectionForeground(new java.awt.Color(255, 255, 255));
        // Establecer ancho de las columnas
        tableBarco.getColumnModel().getColumn(0).setPreferredWidth(50); // Ancho de la columna ID
        tableBarco.getColumnModel().getColumn(1).setPreferredWidth(100); // Ancho de la columna Nombre
        tableBarco.getColumnModel().getColumn(2).setPreferredWidth(100); // Ancho de la columna Modelo
        tableBarco.getColumnModel().getColumn(3).setPreferredWidth(80); // Ancho de la columna Capacidad
        tableBarco.getColumnModel().getColumn(4).setPreferredWidth(150); // Ancho de la columna Mantenimiento
        tableBarco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBarcoMouseClicked(evt);
            }
        });
        tableBarco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableBarcoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableBarco);

        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editar.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setBorderPainted(false);
        btnEditar.setContentAreaFilled(false);
        btnEditar.setDefaultCapable(false);
        btnEditar.setFocusPainted(false);
        btnEditar.setFocusable(false);
        btnEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEditarMouseEntered(evt);
            }
        });
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/basura.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorderPainted(false);
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setDefaultCapable(false);
        btnEliminar.setFocusPainted(false);
        btnEliminar.setFocusable(false);
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEliminarMouseEntered(evt);
            }
        });
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/buscar-alt.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setDefaultCapable(false);
        btnBuscar.setFocusPainted(false);
        btnBuscar.setFocusable(false);
        btnBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBuscarMouseEntered(evt);
            }
        });
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(255, 255, 255));
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/actualizar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setBorderPainted(false);
        btnActualizar.setContentAreaFilled(false);
        btnActualizar.setDefaultCapable(false);
        btnActualizar.setFocusPainted(false);
        btnActualizar.setFocusable(false);
        btnActualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnActualizarMouseEntered(evt);
            }
        });
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/seleccion.png"))); // NOI18N
        btn.setBorderPainted(false);
        btn.setContentAreaFilled(false);
        btn.setDefaultCapable(false);
        btn.setFocusPainted(false);
        btn.setFocusable(false);
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(contentLayout.createSequentialGroup()
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGap(18, 18, 18)
                                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtNombre)
                                            .addComponent(txtTipo)))
                                    .addGroup(contentLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtIdBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(90, 90, 90)
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCapacidad, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                    .addComponent(ComboBoxMantenimiento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(contentLayout.createSequentialGroup()
                                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(contentLayout.createSequentialGroup()
                                        .addComponent(bttGuardar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnEditar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnBuscar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnActualizar))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn))))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(jLabel2)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(txtCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdBarco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(ComboBoxMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentLayout.createSequentialGroup()
                        .addComponent(btn)
                        .addGap(73, 73, 73)))
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttGuardar)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addComponent(btnBuscar)
                    .addComponent(btnActualizar))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

private DefaultComboBoxModel<String> obtenerModeloMantenimiento() {
    DefaultComboBoxModel<String> comboBoxModelMantenimiento = new DefaultComboBoxModel<>();

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT descripcion FROM VistaMantenimiento");

        while (resultSet.next()) {
            String descripcion = resultSet.getString("descripcion");
            comboBoxModelMantenimiento.addElement(descripcion);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return comboBoxModelMantenimiento;
}

  private void cargarDatosTabla() {
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_barco, nombre, modelo, CAST(capacidad_carga AS DECIMAL(10, 2)) AS capacidad_carga, descripcion_mantenimiento FROM VistaBarcosMantenimiento";
        ResultSet resultSet = statement.executeQuery(query);

        // Limpiar datos existentes en la tabla
        DefaultTableModel model = (DefaultTableModel) tableBarco.getModel();
        model.setRowCount(0);

        // Recorrer el resultado de la consulta y agregar filas a la tabla
        while (resultSet.next()) {
            int idBarco = resultSet.getInt("id_barco");
            String nombre = resultSet.getString("nombre");
            String modelo = resultSet.getString("modelo");
            BigDecimal capacidadCarga = resultSet.getBigDecimal("capacidad_carga");
            String descripcionMantenimiento = resultSet.getString("descripcion_mantenimiento");

            // Agregar fila a la tabla
            model.addRow(new Object[]{idBarco, nombre, modelo, capacidadCarga, descripcionMantenimiento});
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}





/*
private String obtenerNombrePuerto(int idPuerto) {
    String nombre = "";

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT nombre FROM Puertos WHERE id_puerto = " + idPuerto;
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            nombre = resultSet.getString("nombre");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return nombre;
}

// Método para obtener la descripción del mantenimiento a partir de su ID
private String obtenerDescripcionMantenimiento(int idMantenimiento) {
    String descripcion = "";

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT descripcion FROM Mantenimiento WHERE id_mantenimiento = " + idMantenimiento;
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            descripcion = resultSet.getString("descripcion");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return descripcion;
}
*/
    
    private boolean existeBarco(int idBarco) {
    boolean existe = false;
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT COUNT(*) AS count FROM Barcos WHERE id_barco = " + idBarco;
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            int count = resultSet.getInt("count");
            existe = (count > 0);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return existe;
}
    private void bttGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttGuardarActionPerformed
    cargarDatosTabla();
    int idBarco;
    String idBarcoText = txtIdBarco.getText().trim();
    if (idBarcoText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese el ID del barco");
        return;
    }
    try {
        idBarco = Integer.parseInt(idBarcoText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El ID del barco debe ser un número entero válido");
        return; // Salir del método si el ID del barco no es válido
    }

    // Validar nombre del barco
    String nombre = txtNombre.getText().trim();
    if (nombre.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese el nombre del barco");
        return;
    }

    // Validar tipo del barco
    String tipo = txtTipo.getText().trim();
    if (tipo.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese el tipo del barco");
        return;
    }
    // Validar existencia del ID del barco
    if (existeBarco(idBarco)) {
        JOptionPane.showMessageDialog(null, "El ID del barco ya existe");
        return; // Salir del método si el ID del barco ya existe
    }
    // Validar capacidad de carga
    double capacidadCarga;
    String capacidadCargaText = txtCapacidad.getText().trim();
    if (capacidadCargaText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese la capacidad de carga");
        return;
    }
    try {
        capacidadCarga = Double.parseDouble(capacidadCargaText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "La capacidad de carga debe ser un número válido");
        return; // Salir del método si la capacidad de carga no es válida
    }

    String mantenimiento = ComboBoxMantenimiento.getSelectedItem().toString();

    // Obtener el id_mantenimiento correspondiente a la descripción del mantenimiento seleccionado
    int idMantenimiento = obtenerIdMantenimiento(mantenimiento);

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "INSERT INTO Barcos (id_barco, nombre, modelo, capacidad_carga, id_mantenimiento) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement statement = connection.prepareStatement(query);
        
        
        statement.setInt(1, idBarco);
        statement.setString(2, nombre);
        statement.setString(3, tipo);
        statement.setDouble(4, capacidadCarga);
        statement.setInt(5, idMantenimiento);

        statement.executeUpdate();

        statement.close();
        connection.close();

        // Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(null, "Registro exitoso");

        // Limpiar los campos de texto
        txtIdBarco.setText("");
        txtNombre.setText("");
        txtTipo.setText("");
        txtCapacidad.setText("");

    } catch (SQLException e) {
        e.printStackTrace();
        // Mostrar un mensaje de error si ocurre una excepción
        JOptionPane.showMessageDialog(null, "Error al registrar el barco");
    }
    cargarDatosTabla();

    }//GEN-LAST:event_bttGuardarActionPerformed

        
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
     // Validar ID del barco
    int idBarco;
    String idBarcoText = txtIdBarco.getText().trim();
    if (idBarcoText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese el ID del barco");
        return;
    }
    try {
        idBarco = Integer.parseInt(idBarcoText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El ID del barco debe ser un número entero válido");
        return; // Salir del método si el ID del barco no es válido
    }

    // Obtener los nuevos valores de los campos de texto
    String nombre = txtNombre.getText().trim();
    String tipo = txtTipo.getText().trim();
    double capacidadCarga;
    String capacidadCargaText = txtCapacidad.getText().trim();
    if (capacidadCargaText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese la capacidad de carga");
        return;
    }
    try {
        capacidadCarga = Double.parseDouble(capacidadCargaText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "La capacidad de carga debe ser un número válido");
        return; // Salir del método si la capacidad de carga no es válida
    }

    String mantenimiento = ComboBoxMantenimiento.getSelectedItem().toString();

    // Obtener el id_mantenimiento correspondiente a la descripción del mantenimiento seleccionado
    int idMantenimiento = obtenerIdMantenimiento(mantenimiento);

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "UPDATE Barcos SET nombre = ?, modelo = ?, capacidad_carga = ?, id_mantenimiento = ? WHERE id_barco = ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, nombre);
        statement.setString(2, tipo);
        statement.setDouble(3, capacidadCarga);
        statement.setInt(4, idMantenimiento);
        statement.setInt(5, idBarco);
        statement.executeUpdate();

        // Cerrar la conexión y liberar recursos
        statement.close();
        connection.close();

        // Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(null, "Actualización exitosa");

        // Limpiar los campos de texto
        txtIdBarco.setText("");
        txtNombre.setText("");
        txtTipo.setText("");
        txtCapacidad.setText("");

        // Actualizar los datos en la tabla
        cargarDatosTabla();

    } catch (SQLException e) {
        e.printStackTrace();
        // Mostrar un mensaje de error si ocurre una excepción
        JOptionPane.showMessageDialog(null, "Error al actualizar el barco");
    }


    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       String idBarcoText = JOptionPane.showInputDialog(null, "Ingrese el ID del barco a eliminar:");
if (idBarcoText == null || idBarcoText.isEmpty()) {
    return; // Salir del método si no se ingresa un ID válido
}
try {
    int idBarco = Integer.parseInt(idBarcoText);

    // Obtener los datos del registro a eliminar
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "SELECT * FROM Barcos WHERE id_barco = ?";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setInt(1, idBarco);
    ResultSet resultSet = statement.executeQuery();

    // Verificar si se encontró el registro
    if (resultSet.next()) {
        // Obtener los campos del registro
        int id = resultSet.getInt("id_barco");
        String nombre = resultSet.getString("nombre");
        String tipo = resultSet.getString("modelo");
        double capacidadCarga = resultSet.getDouble("capacidad_carga");
        int idMantenimiento = resultSet.getInt("id_mantenimiento");

        // Mostrar los campos en un JOptionPane
        String mensaje = "ID: " + id + "\n"
                + "Nombre: " + nombre + "\n"
                + "Modelo: " + tipo + "\n"
                + "Capacidad de carga: " + capacidadCarga + "\n"
                + "ID de mantenimiento: " + idMantenimiento + "\n"
                + "\n¿Desea eliminar este registro?";

        int confirmacion = JOptionPane.showConfirmDialog(null, mensaje, "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Realizar la eliminación del registro
                String deleteQuery = "DELETE FROM Barcos WHERE id_barco = ?";
                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
                deleteStatement.setInt(1, idBarco);
                int filasAfectadas = deleteStatement.executeUpdate();

                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID especificado");
                }

                // Actualizar los datos en la tabla
                cargarDatosTabla();

                deleteStatement.close();
            } catch (SQLException e) {
                // Mostrar un mensaje de error si ocurre una excepción
                JOptionPane.showMessageDialog(null, "Error al eliminar el registro del barco");
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID especificado");
    }

    // Cerrar la conexión y liberar recursos
    resultSet.close();
    statement.close();
    connection.close();

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID del barco debe ser un número entero válido");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos");
    e.printStackTrace();
}


    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String nombreBusqueda = JOptionPane.showInputDialog(null, "Ingrese el nombre a buscar:");
    if (nombreBusqueda == null || nombreBusqueda.isEmpty()) {
        return; // Salir del método si no se ingresa un nombre válido
    }
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "SELECT id_barco, nombre, modelo, capacidad_carga, descripcion_mantenimiento FROM VistaBarcosMantenimiento WHERE nombre LIKE ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, "%" + nombreBusqueda + "%");
        ResultSet resultSet = statement.executeQuery();

        // Obtener los metadatos del resultado de la consulta
        ResultSetMetaData metaData = resultSet.getMetaData();

        // Obtener el número de columnas
        int numColumnas = metaData.getColumnCount();

        // Limpiar la tabla
        DefaultTableModel model = (DefaultTableModel) tableBarco.getModel();
        model.setRowCount(0);

        // Limpiar la tabla
    model.setRowCount(0);
    model.setColumnCount(numColumnas); // Agregar esta línea para establecer el número de columnas

// Recorrer el resultado de la consulta y agregar las filas a la tabla
while (resultSet.next()) {
    Object[] fila = new Object[numColumnas];
    for (int i = 1; i <= numColumnas; i++) {
        fila[i - 1] = resultSet.getObject(i);
    }
    model.addRow(fila);
}

        // Cerrar el resultado, la declaración y la conexión
        resultSet.close();
        statement.close();
        connection.close();

        // Mostrar un mensaje si no se encontraron resultados
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No se encontraron registros con el nombre especificado");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        // Mostrar un mensaje de error si ocurre una excepción
        JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda");
    }

    

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        cargarDatosTabla();
        DefaultComboBoxModel<String> comboBoxModelMantenimiento = obtenerModeloMantenimiento();
        ComboBoxMantenimiento.setModel(comboBoxModelMantenimiento);

    }//GEN-LAST:event_btnActualizarActionPerformed

    private void bttGuardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bttGuardarMouseEntered
                        bttGuardar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
                               

    }//GEN-LAST:event_bttGuardarMouseEntered

    private void btnEditarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarMouseEntered
                        btnEditar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditarMouseEntered

    private void btnEliminarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseEntered
                        btnEliminar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarMouseEntered

    private void btnBuscarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarMouseEntered
                        btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarMouseEntered

    private void btnActualizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnActualizarMouseEntered
                        btnActualizar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActualizarMouseEntered

    private void tableBarcoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableBarcoKeyPressed
        // TODO add your handling code here:
       
        
        
        
    }//GEN-LAST:event_tableBarcoKeyPressed

    private void tableBarcoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBarcoMouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_tableBarcoMouseClicked

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tableBarco.getSelectedRow();
        if (filaSeleccionada >= 0) {
            // Obtener los valores de la fila seleccionada
            int idBarco = (int) tableBarco.getValueAt(filaSeleccionada, 0);
            String nombre = (String) tableBarco.getValueAt(filaSeleccionada, 1);
            String tipo = (String) tableBarco.getValueAt(filaSeleccionada, 2);
            BigDecimal capacidadCargaDecimal = (BigDecimal) tableBarco.getValueAt(filaSeleccionada, 3);
            double capacidadCarga = capacidadCargaDecimal.doubleValue();
            
            String mantenimiento = (String) tableBarco.getValueAt(filaSeleccionada, 4);

            // Mostrar los valores en los campos de texto correspondientes
            txtIdBarco.setText(String.valueOf(idBarco));
            txtNombre.setText(nombre);
            txtTipo.setText(tipo);
            txtCapacidad.setText(String.valueOf(capacidadCarga));
            ComboBoxMantenimiento.setSelectedItem(mantenimiento);
        
    }
    }//GEN-LAST:event_btnActionPerformed

        


private int obtenerIdMantenimiento(String descripcionMantenimiento) {
    int idMantenimiento = -1;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_mantenimiento FROM Mantenimiento WHERE descripcion = '" + descripcionMantenimiento + "'";
        ResultSet resultSet = statement.executeQuery(query);

        if (resultSet.next()) {
            idMantenimiento = resultSet.getInt("id_mantenimiento");
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return idMantenimiento;
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxMantenimiento;
    private javax.swing.JButton btn;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton bttGuardar;
    private javax.swing.JPanel content;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tableBarco;
    private javax.swing.JTextField txtCapacidad;
    private javax.swing.JTextField txtIdBarco;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTipo;
    // End of variables declaration//GEN-END:variables
}
