/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anyel
 */
public class Ubicación extends javax.swing.JFrame {

    /**
     * Creates new form Rol
     */
    public Ubicación() {
        initComponents();
        setLocationRelativeTo(null);
        // Configuración del JFrame
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        setTitle("Registro de Ubicación");
        cargarDatosTabla();
         // Establece la imagen del icono
        ImageIcon icono = new ImageIcon(getClass().getResource("/icon/espe.png"));
        setIconImage(icono.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUbi = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        LabelClose = new javax.swing.JLabel();
        bttGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(25, 118, 211));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ID Ubicación:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Nombre:");

        txtID.setText(" ");

        txtNombre.setText(" ");

        tablaUbi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID Ubicación", "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaUbi);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("UBICACIÓN");

        LabelClose.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        LabelClose.setForeground(new java.awt.Color(255, 255, 255));
        LabelClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelClose.setText("X");
        LabelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LabelCloseMouseClicked(evt);
            }
        });

        bttGuardar.setForeground(new java.awt.Color(255, 255, 255));
        bttGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/guardar.png"))); // NOI18N
        bttGuardar.setBorderPainted(false);
        bttGuardar.setContentAreaFilled(false);
        bttGuardar.setDefaultCapable(false);
        bttGuardar.setFocusPainted(false);
        bttGuardar.setFocusable(false);
        bttGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttGuardarActionPerformed(evt);
            }
        });

        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editar.png"))); // NOI18N
        btnEditar.setBorderPainted(false);
        btnEditar.setContentAreaFilled(false);
        btnEditar.setDefaultCapable(false);
        btnEditar.setFocusPainted(false);
        btnEditar.setFocusable(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/basura.png"))); // NOI18N
        btnEliminar.setBorderPainted(false);
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setDefaultCapable(false);
        btnEliminar.setFocusPainted(false);
        btnEliminar.setFocusable(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/buscar-alt.png"))); // NOI18N
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setDefaultCapable(false);
        btnBuscar.setFocusPainted(false);
        btnBuscar.setFocusable(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(255, 255, 255));
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/actualizar.png"))); // NOI18N
        btnActualizar.setBorderPainted(false);
        btnActualizar.setContentAreaFilled(false);
        btnActualizar.setDefaultCapable(false);
        btnActualizar.setFocusPainted(false);
        btnActualizar.setFocusable(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(157, 157, 157)
                .addComponent(LabelClose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(bttGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel5))
                    .addComponent(LabelClose, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bttGuardar)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBuscar)
                        .addComponent(btnActualizar)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void cargarDatosTabla() {
    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        Statement statement = connection.createStatement();
        String query = "SELECT id_ubicacion, ubicacion FROM VistaUbicaciones";
        ResultSet resultSet = statement.executeQuery(query);

        // Limpiar datos existentes en la tabla
        DefaultTableModel model = (DefaultTableModel) tablaUbi.getModel();
        model.setRowCount(0);

        // Recorrer el resultado de la consulta y agregar filas a la tabla
        while (resultSet.next()) {
            int idUbicacion = resultSet.getInt("id_ubicacion");
            String nombre = resultSet.getString("ubicacion");

            // Agregar fila a la tabla
            model.addRow(new Object[]{idUbicacion, nombre});
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}



    private void LabelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelCloseMouseClicked
        if(JOptionPane.showConfirmDialog(null, "¿Está seguro de salir del sistema? ", "Confirmar salida",JOptionPane.YES_NO_OPTION)==0){
dispose();
        }
    }//GEN-LAST:event_LabelCloseMouseClicked
private boolean existeRol(int idRol) {
    boolean existe = false;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        PreparedStatement statement = connection.prepareStatement("SELECT COUNT(*) AS count FROM Roles WHERE id_rol = ?");
        statement.setInt(1, idRol);
        ResultSet resultSet = statement.executeQuery();

        if (resultSet.next()) {
            int count = resultSet.getInt("count");
            existe = (count > 0);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return existe;
}

    private void bttGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttGuardarActionPerformed
    int idUbicacion;
String idUbicacionText = txtID.getText().trim();
if (idUbicacionText.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el ID de la ubicación");
    return;
}
try {
    idUbicacion = Integer.parseInt(idUbicacionText);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID de la ubicación debe ser un número entero válido");
    return; // Salir del método si el ID de la ubicación no es válido
}

// Validar nombre de la ubicación
String ubicacion = txtNombre.getText().trim();
if (ubicacion.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el nombre de la ubicación");
    return;
}

// Validar existencia del ID de la ubicación
if (existeUbicacion(idUbicacion)) {
    JOptionPane.showMessageDialog(null, "El ID de la ubicación ya existe");
    return; // Salir del método si el ID de la ubicación ya existe
}

try {
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "INSERT INTO Ubicaciones (id_ubicacion, ubicacion) VALUES (?, ?)";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setInt(1, idUbicacion);
    statement.setString(2, ubicacion);

    statement.executeUpdate();

    statement.close();
    connection.close();

    // Mostrar un mensaje de éxito
    JOptionPane.showMessageDialog(null, "Ubicación agregada correctamente");

    // Limpiar los campos de texto
    txtID.setText("");
    txtNombre.setText("");

    // Cargar los datos actualizados en la tabla
    cargarDatosTabla();

} catch (SQLException e) {
    e.printStackTrace();
    // Mostrar un mensaje de error si ocurre una excepción
    JOptionPane.showMessageDialog(null, "Error al agregar la ubicación");
}


    }//GEN-LAST:event_bttGuardarActionPerformed
private boolean existeUbicacion(int idUbicacion) {
    boolean existe = false;

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "SELECT COUNT(*) AS count FROM Ubicaciones WHERE id_ubicacion = ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setInt(1, idUbicacion);
        ResultSet resultSet = statement.executeQuery();

        if (resultSet.next()) {
            int count = resultSet.getInt("count");
            existe = (count > 0);
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return existe;
}

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
           int idUbicacion;
String idUbicacionText = txtID.getText().trim();
if (idUbicacionText.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el ID de la ubicación");
    return;
}
try {
    idUbicacion = Integer.parseInt(idUbicacionText);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID de la ubicación debe ser un número entero válido");
    return;
}

// Validar nombre de la ubicación
String ubicacion = txtNombre.getText().trim();
if (ubicacion.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Ingrese el nombre de la ubicación");
    return;
}

try {
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "UPDATE Ubicaciones SET ubicacion = ? WHERE id_ubicacion = ?";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setString(1, ubicacion);
    statement.setInt(2, idUbicacion);

    int rowsAffected = statement.executeUpdate();
    if (rowsAffected > 0) {
        JOptionPane.showMessageDialog(null, "Ubicación editada exitosamente");
    } else {
        JOptionPane.showMessageDialog(null, "No se encontró la ubicación con ID: " + idUbicacion);
    }

    statement.close();
    connection.close();
} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error al editar la ubicación");
}
cargarDatosTabla();

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String idUbicacionText = JOptionPane.showInputDialog(null, "Ingrese el ID de la ubicación a eliminar:");
if (idUbicacionText == null || idUbicacionText.isEmpty()) {
    return; // Salir del método si no se ingresa un ID válido
}
try {
    int idUbicacion = Integer.parseInt(idUbicacionText);

    // Obtener los datos de la ubicación a eliminar
    Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
    String query = "SELECT * FROM Ubicaciones WHERE id_ubicacion = ?";
    PreparedStatement statement = connection.prepareStatement(query);
    statement.setInt(1, idUbicacion);
    ResultSet resultSet = statement.executeQuery();

    // Verificar si se encontró la ubicación
    if (resultSet.next()) {
        // Obtener los datos de la ubicación
        String nombreUbicacion = resultSet.getString("ubicacion");

        // Mostrar los datos de la ubicación en un JOptionPane
        String mensajeConfirmacion = "¿Desea eliminar la siguiente ubicación?\n\n";
        mensajeConfirmacion += "ID: " + idUbicacion + "\n";
        mensajeConfirmacion += "Ubicación: " + nombreUbicacion + "\n";
        int confirmacion = JOptionPane.showConfirmDialog(null, mensajeConfirmacion, "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Realizar la eliminación de la ubicación
                String deleteQuery = "DELETE FROM Ubicaciones WHERE id_ubicacion = ?";
                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
                deleteStatement.setInt(1, idUbicacion);
                int filasAfectadas = deleteStatement.executeUpdate();

                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(null, "Ubicación eliminada exitosamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró ninguna ubicación con el ID especificado");
                }

                deleteStatement.close();
            } catch (SQLException e) {
                // Mostrar un mensaje de error si ocurre una excepción
                JOptionPane.showMessageDialog(null, "Error al eliminar la ubicación");
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "No se encontró ninguna ubicación con el ID especificado");
    }

    // Cerrar la conexión y liberar recursos
    resultSet.close();
    statement.close();
    connection.close();

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID de la ubicación debe ser un número entero válido");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos");
    e.printStackTrace();
}

cargarDatosTabla();

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
    String nombreBusqueda = JOptionPane.showInputDialog(null, "Ingrese el nombre a buscar:");
    if (nombreBusqueda == null || nombreBusqueda.isEmpty()) {
        return; // Salir del método si no se ingresa un nombre válido
    }

    try {
        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Mariscos", "anyel", "admin");
        String query = "SELECT id_ubicacion, ubicacion FROM VistaUbicaciones WHERE ubicacion LIKE ?";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setString(1, "%" + nombreBusqueda + "%");
        ResultSet resultSet = statement.executeQuery();

        // Obtener los metadatos del resultado de la consulta
        ResultSetMetaData metaData = resultSet.getMetaData();

        // Obtener el número de columnas
        int numColumnas = metaData.getColumnCount();

        // Limpiar la tabla
        DefaultTableModel model = (DefaultTableModel) tablaUbi.getModel();
        model.setRowCount(0);

        // Recorrer el resultado de la consulta y agregar las filas a la tabla
        while (resultSet.next()) {
            Object[] fila = new Object[numColumnas];
            for (int i = 1; i <= numColumnas; i++) {
                fila[i - 1] = resultSet.getObject(i);
            }
            model.addRow(fila);
        }

        // Cerrar el resultado, la declaración y la conexión
        resultSet.close();
        statement.close();
        connection.close();

        // Mostrar un mensaje si no se encontraron resultados
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No se encontraron registros con el nombre especificado");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        // Mostrar un mensaje de error si ocurre una excepción
        JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda");
    }





    
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        cargarDatosTabla();
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ubicación.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ubicación.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ubicación.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ubicación.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ubicación().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelClose;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton bttGuardar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaUbi;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
